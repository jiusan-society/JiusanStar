image: docker:latest

services:
  - docker:dind

stages:
  - test
  - build
  - package
  - deploy

unit_test:
 image: gradle:latest
 stage: test
 script:
   - ./gradlew test

build_jar:
  image: gradle:latest
  stage: build
  script:
    - ./gradlew bootRepackage
    - ./gradlew copyJarToRootDir
  artifacts:
    paths:
      - ./*.jar
  only:
    - master

package_to_docker_image:
  stage: package
  before_script:
    - docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" $DOCKER_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_REGISTRY_IMAGE:latest" .
    - docker push "$DOCKER_REGISTRY_IMAGE:latest"
  only:
    - master

deploy_on_server:
  stage: deploy
  variables: # 不去 gitlab clone repository，毕竟 GFW 太强大
    GIT_STRATEGY: none
  dependencies: # 不去下 build_jar 时候产生的 jar，毕竟 GFW 太强大
    - []
  script:
    - docker container ls
    - docker container stop $DOCKER_CN_REGISTRY_IMAGE
    - docker pull $DOCKER_CN_REGISTRY_IMAGE:latest
    - docker run --name $DOCKER_CN_REGISTRY_IMAGE -e "SPRING_PROFILES_ACTIVE=prod" -p 80:80 -p 443:443 --net="host" -d $DOCKER_CN_REGISTRY_IMAGE
  only:
    - master
  tags:
    - run-on-aliyun
