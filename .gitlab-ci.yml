stages:
  - test
  - build
  - package
  - deploy

unit_test:
 stage: test
 image: gradle:latest
 script:
   - ./gradlew test

build_jar:
  stage: build
  image: gradle:latest
  variables:
    GIT_STRATEGY: fetch
  script:
    - ./gradlew bootRepackage
    - ./gradlew copyJarToRootDir
# 产出 jar，供 package 阶段生成 docker image 使用
  artifacts:
    paths:
      - ./*.jar
  only:
    - master

package_to_docker_image:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" $DOCKER_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_REGISTRY_IMAGE:latest" .
    - docker push "$DOCKER_REGISTRY_IMAGE:latest"
  only:
    - master

# 自己服务器上架设的 gitlab-runner，运行模式为 shell，所以跑的这些命令都是服务器上自己装的
deploy_on_server:
  stage: deploy
# 不去 gitlab clone repository，毕竟 GFW 太强大
  variables:
    GIT_STRATEGY: none
# 不去下 build_jar 时候产生的 jar，毕竟 GFW 太强大
  dependencies: []
  script:
    - whoami
    - docker container ls
    - docker pull $DOCKER_CN_REGISTRY_IMAGE:latest
    - docker container rm -f jiusan-star
  after_script:
    - docker run --name="jiusan-star" -e "SPRING_PROFILES_ACTIVE=prod" -e TZ=Asia/Shanghai -v 93Star:/Data -d $DOCKER_CN_REGISTRY_IMAGE
  only:
    - master
  tags:
    - run-on-tencent
